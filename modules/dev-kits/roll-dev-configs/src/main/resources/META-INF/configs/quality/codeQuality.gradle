apply plugin: 'checkstyle'
apply plugin: 'codenarc'
apply plugin: "com.github.spotbugs"
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'java'

java {
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'utf-8'
    options.compilerArgs = [
        '-Xlint:-options',
        '-Xlint:deprecation',
        '-Xlint:unchecked',
        '-Werror'
    ]
}

tasks.withType(GroovyCompile) {
    options.encoding = 'utf-8'
    options.compilerArgs = ['-Xlint:-options']
    groovyOptions.encoding = 'utf-8'
}

// Extract config files in jar
def devConfExtractPath = "${rootProject.projectDir}/build/roll-dev-configs"
delete devConfExtractPath
def jars = rootProject.buildscript.configurations.classpath.files as List<File>
def devConfJar = jars.find { it.name.matches '.*roll-dev-configs.*'}
if (devConfJar) {
    ant.unjar src: devConfJar, dest: devConfExtractPath
}

dependencies {
    pmd libraries.p3c_pmd
    checkstyle 'io.github.alphahinex:checkstyle-checkers:1.0.0.RELEASE'
}

def configDir = hasProperty('devConfRoot')
        ? new File(devConfRoot, 'configs/quality')
        : new File(devConfExtractPath, 'META-INF/configs/quality')

ext.checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    configFile = new File(checkstyleConfigDir, "checkstyle.xml")
    configProperties.checkstyleConfigDir = checkstyleConfigDir
    toolVersion = '8.14'
}

codenarc {
    configFile = new File(configDir, "codenarc.xml")
    toolVersion = '1.2.1'
}

pmd {
    // According to https://github.com/alibaba/p3c/blob/p3c-pmd-2.0.0/p3c-pmd/pom.xml#L17
    toolVersion = '6.15.0'
    ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
    rulePriority 4
}

spotbugs {
    excludeFilter = file("$configDir/spotbugs/excludeFilter.xml")
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/DelegatingServletInputStream**',
                '**/HeaderValueHolder**'
            ])
        }))
    }
}

configurations.codenarc.resolutionStrategy.force(libraries.groovy_all)

def excludeArtificialHttpServletRequest = 'io/github/springroll/web/request/**'

tasks.withType(Checkstyle) {
    exclude "**/$excludeArtificialHttpServletRequest"
}

tasks.withType(Pmd) {
    exclude "**/$excludeArtificialHttpServletRequest"

    ruleSetFiles = files(
        "$configDir/pmd/ali-comment.xml",
        "$configDir/pmd/ali-concurrent.xml",
        "$configDir/pmd/ali-constant.xml",
        "$configDir/pmd/ali-exception.xml",
        "$configDir/pmd/ali-flowcontrol.xml",
        "$configDir/pmd/ali-naming.xml",
        "$configDir/pmd/ali-oop.xml",
        "$configDir/pmd/ali-orm.xml",
        "$configDir/pmd/ali-other.xml",
        "$configDir/pmd/ali-set.xml"
    )

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

test {
    reports.html.enabled = false
    reports.junitXml.enabled = false
    //project unit parallel
    //maxParallelForks = 2
    //GC
    forkEvery = 100
}

check.dependsOn jacocoTestReport
build.dependsOn jacocoTestReport
